from flask import Flask, request, jsonify
# from service_api.textract import TEXTRACT
#from service_api.raw_text import TEXT
from service_api.default_json_extractor import default_json
from acord130_V2013_09.acord_130_schema_mapper import acord130_mapper
from acord140_V2014_12.acord_140_schema_mapper import acord140_mapper
from acord126_V2014_04.schema_json_mapper import acord126_mapper
#from acord126.acord_126_schema_mapper import acord126_mapper
from acord125_V2016_03.KEYVALUERESTRUCTURE import acord125_mapper
from custom_page_extractor.main import Custom_Main
from aws_s3.connect_s3 import upload_to_s3
# from service_api.acord_140_schema_mapper import mapper_function
from database.mongoDB_collection import MongoDBHandler
from Swagger_config.swagger_configuration import configure_swagger, serve_swagger_json, SWAGGER_URL
from service_api.read_acord_schema import read_acord_schema
import json
import os
import time
import shutil
from logzero import logger
from service_api.convert_pdf import convert_pdf
import traceback

app = Flask(__name__)

# Implementing and giving the instance of configure_swagger method from swagger_configuration file
# Configure Swagger UI and get the Swagger blueprint
swaggerui_blueprint = configure_swagger()
# Registering the Swagger UI blueprint with the Flask app
app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

# This endpoint serves the API definition in JSON format.
# It retrieves the JSON content generated by Swagger.
@app.route('/swagger.json')
def swagger():
    # Serve the JSON content generated by Swagger
    return serve_swagger_json()

@app.route('/health', methods=['GET','POST'])
def health_check():
    return 'OK'

@app.route('/convert-pdf', methods=['POST'])
def convert_pdf_file():
    try:

        if 'pdf_file' not in request.form:
            return jsonify({'error': 'No file part'}), 400

        file = request.form['pdf_file']

        # template = request.form.get('template', 'DEFAULT')

        return convert_pdf(file)

    except Exception as e:
        error_msg = f"An error occurred: {str(e)}"
        app.logger.error(error_msg)
        return jsonify({'error': error_msg}), 500
    
@app.route("/custom-pages-data-extraction",methods=['POST'])
def custom_page_data():
    try:
        if 'pdf_file' not in request.files:
            return jsonify({'error': 'No file part'}), 400

        file = request.files['pdf_file']
        if file.filename == '':
            return jsonify({'error': 'No selected file'}), 400

        # Specify the directory to save the file
        upload_folder = 'input'
        if not os.path.exists(upload_folder):
            os.makedirs(upload_folder)

        # Save the file to the specified directory
        file_path = os.path.join(upload_folder, file.filename)
        file.save(file_path)

         # Get the comma-separated list of page numbers as a string
        pages_str = request.form['pages']
        
        # Split the string to get individual page numbers
        pages = [int(page) for page in pages_str.split(',')]

        print("Numbers ::",pages)

        logger.info(f"Number of pages to extract data:: {pages}")

        start_time = time.time()

        custom_extractor = Custom_Main()

        kv_output,page_count = custom_extractor.extract_data(file_path,pages)
        
        json_output = custom_extractor.raw_json(kv_output,page_count,file.filename)

        end_time = time.time()

        logger.info(f"Time taken for conversion :: {end_time-start_time}")
           

        return json_output
    
    except Exception as e:
        error_msg = f"An error occurred: {str(e)}"
        app.logger.error(error_msg)
        traceback.print_exc()
        return jsonify({'error': error_msg}), 500


@app.route("/acord_schema", methods=['GET', 'POST'])
def acord_schema():
    read_acord_form_name = request.form['acord_form_name']
    return read_acord_schema(read_acord_form_name)


if __name__ == '__main__':
    app.run(host='0.0.0.0',port=8000,debug=True)
