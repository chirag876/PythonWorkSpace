from flask import Flask, jsonify, request, send_file, jsonify, render_template, redirect, url_for
from flask_mysqldb import MySQL
from student_service import *
from flask_jwt_extended import JWTManager
from authentication import *
from Swagger_Config.swagger_configuration import configure_swagger, serve_swagger_json, SWAGGER_URL
import csv
from werkzeug.utils import secure_filename
import os


app = Flask(__name__)
service = StudentService()

# Setting up JWT Secret Key for authentication
app.config['JWT_SECRET_KEY'] = new_key
# Initializing JWTManager with the Flask app
jwt = JWTManager(app)

# Implementing and giving the instance of configure_swagger method from swagger_configuration file
# Configure Swagger UI and get the Swagger blueprint
swaggerui_blueprint = configure_swagger()
# Registering the Swagger UI blueprint with the Flask app
app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

# This endpoint serves the API definition in JSON format.
# It retrieves the JSON content generated by Swagger.
@app.route('/swagger.json')
def swagger():
    # Serve the JSON content generated by Swagger
    return serve_swagger_json()


#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint handles user authentication with JWT
@app.route('/authenticate', methods=['POST'])
def login():
    # Call the authentication function to verify user credentials
    # and generate an access token upon successful authentication
    return authenticate_login()

#-------------------------------------------------------------------------------------------------------------------------------------------

# Define the folder where uploaded files will be stored
UPLOAD_FOLDER = 'Data_Input'
# Define the allowed file extensions for upload
ALLOWED_EXTENSIONS = {'csv', 'json'}
# Configure the app to use the defined upload folder
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Helper function to check if the file extension is allowed
def allowed_file(filename):
    # Check if the filename has a dot and the extension is in the allowed set
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# This endpoint imports students data from a file (JSON or CSV)
@app.route('/import/students', methods=['POST'])
def import_students():
    # Check if the POST request has a file part and a filename parameter
    if 'file' not in request.files or 'filename' not in request.form:
        return jsonify({'Failure': 'No file or filename parameter provided'}), 400
    # Get the file and filename from the request
    file = request.files['file']
    filename = request.form['filename']
    # Check if the file is allowed and has a filename
    if file and allowed_file(file.filename):
        # Sanitize the filename and save the file to the uploads folder
        filename = secure_filename(file.filename)
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        # Process the uploaded file and add students to the database
        success = service.import_students(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        # Check if the import was successful
        if success:
            return jsonify({'Success': 'Students imported successfully'}), 200
        else:
            return jsonify({'Failure': 'Failed to import students. Check the file format or content'}), 400
        # Return a failure message if the file or filename is invalid
    return jsonify({'Failure': 'Invalid file or filename parameter'}), 400

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint allows downloading student data in different formats (JSON or CSV)
# The 'format' parameter in the URL specifies the desired download format.
@app.route('/download/students/<format>', methods=['GET'])
def download_students(format):
    # Retrieve all students from the database
    students = service.get_students()
    # Check if there are students data present for download
    if not students:
        return jsonify({'Failure': 'No students found for download'}), 404
    # Choose the download format based on the provided parameter
    if format == 'json':
        students_data = json.dumps(students, indent=2)
        # Create a temporary file to store the JSON data
        with open('C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Json/students_data.json', 'w') as file:
            file.write(students_data)
        # Send the JSON file for download
        return send_file('C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Json/students_data.json', as_attachment=True, download_name='C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Json/students_data.json', mimetype='application/json')
    elif format == 'csv':
        # Create a temporary file to store the CSV data
        with open('C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Csv/students_data.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            # Write CSV header
            writer.writerow(['id', 'name', 'age', 'grade'])
            # Write student data
            for student in students:
                writer.writerow([student['id'], student['name'], student['age'], student['grade']])
        # Send the CSV file for download
        return send_file('C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Csv/students_data.csv', as_attachment=True, download_name='C:/Workspaces/CodeSpaces/Python_Work/Flask_API-main/Flask_Api_student_db/Csv/students_data.csv', mimetype='text/csv')
    else:
        # Handle the case where an invalid format is specified
        return jsonify({'Failure': 'Invalid format specified'}), 400

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint adds a new student to the database
@app.route('/students', methods=['POST'])
def add_student():
    # Extract the student data from the request JSON
    data = request.get_json()
    # Call the 'add_student' method of the 'service' to add a student to the database
    service.add_student(data)
    # Return a success message along with the status code
    return ('Student added successfully'), 200

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint retrieves all students in the database
@app.route('/students', methods=['GET'])
# @jwt_required()  
def get_students():
    # Retrieve all students' information from the StudentService
    student = service.get_students()
    # If no students are found, return a 'Not Found' error message
    if student is None:
        return jsonify({'Failure': 'No students found'}), 404
    # Return the retrieved student information with a success status
    return jsonify(student), 200

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint retrieves information about a single student using the provided ID from the database
@app.route('/students/<int:id>', methods=['GET'])
# @jwt_required()  # Uncomment when authentication is enabled
def get_student(id):
    # Retrieve student information using the provided ID
    student = service.get_student(id)
    # Check if the student with the given ID exists
    if student is None:
        # Return a 'Not Found' error message if no student is found with the provided ID
        return jsonify({'Failure': f"No student found with ID {id}"}), 404
    # Return the student information with a success status code
    return jsonify(student), 200

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint retrieves information about a single student with the provided ID from the database 
# and attempts to update the information of that particular student.
@app.route('/students/<int:id>', methods=['PUT'])
def update_student(id):
    # Get the updated data from the request
    data = request.get_json()
    # Call the service method to update the student's information
    student = service.update_student(id, data)
    # Check if the student information was successfully updated
    if student:
        # Return a success message and a status code of 200 if the student was updated
        return jsonify({'Success': f"Student with ID {id} successfully updated"}), 200
    else:
        # Return a failure message and a status code of 404 if no student was found with the provided ID
        return jsonify({'Failure': f"Failed to update. No student found with ID {id}"}), 404

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint retrieves information about a single student with the specified ID from the database 
# and then deletes the information of that particular student.
@app.route('/students/<int:id>', methods=['DELETE'])
def delete_student(id):
    # Retrieve information and attempt to delete the student with the provided ID
    student = service.delete_student(id)
    # If the student information is found and successfully deleted
    if student:
        # Return a success message and status code
        return jsonify({'Success': f"Student with ID {id} successfully deleted"}), 200
    else:
        # Return an error message and a 'Not Found' status code if no student is found with the provided ID
        return jsonify({'Failure': f"No student found with ID {id}"}), 404

#-------------------------------------------------------------------------------------------------------------------------------------------

# This endpoint is responsible for truncating the 'students' table in the database.
@app.route('/students', methods=['DELETE'])
def delete_students():
    # Attempt to delete all students from the table
    students = service.delete_students()
    # Check if any students were deleted
    if students:
        # Return a success message with a 200 status code if the table was successfully truncated
        return jsonify({'Success': 'Truncate table successful'}), 200
    else:
        # Return a failure message with a 404 status code if the table was already empty
        return jsonify({'Failure': 'Table is already empty'}), 404
        
if __name__ == '__main__':
    app.run(debug=True, port=8080)
